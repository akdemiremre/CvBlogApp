// <auto-generated />
using System;
using CvBlog.Data.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CvBlog.Data.Migrations
{
    [DbContext(typeof(CvBlogAppContext))]
    [Migration("20241001104526_UserAboutColumnUpdate")]
    partial class UserAboutColumnUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CvBlog.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3879),
                            Description = "Açıklama1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3880),
                            Name = "Kategori1",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3900),
                            Description = "Açıklama2",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3900),
                            Name = "Kategori2",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3904),
                            Description = "Açıklama3",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3904),
                            Name = "Kategori3",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3977),
                            Description = "Açıklama4",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3977),
                            Name = "Kategori4",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3982),
                            Description = "Açıklama5",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3982),
                            Name = "Kategori5",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3987),
                            Description = "Açıklama6",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3988),
                            Name = "Kategori6",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3992),
                            Description = "Açıklama7",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3993),
                            Name = "Kategori7",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3996),
                            Description = "Açıklama8",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(3997),
                            Name = "Kategori8",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4000),
                            Description = "Açıklama9",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4000),
                            Name = "Kategori9",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4005),
                            Description = "Açıklama10",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4006),
                            Name = "Kategori10",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4009),
                            Description = "Açıklama11",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4010),
                            Name = "Kategori11",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4013),
                            Description = "Açıklama12",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4013),
                            Name = "Kategori12",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 13,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4016),
                            Description = "Açıklama13",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4017),
                            Name = "Kategori13",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 14,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4020),
                            Description = "Açıklama14",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4020),
                            Name = "Kategori14",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 15,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4024),
                            Description = "Açıklama15",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4024),
                            Name = "Kategori15",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 16,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4027),
                            Description = "Açıklama16",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4028),
                            Name = "Kategori16",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 17,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4031),
                            Description = "Açıklama17",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4032),
                            Name = "Kategori17",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 18,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4036),
                            Description = "Açıklama18",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4036),
                            Name = "Kategori18",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 19,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4039),
                            Description = "Açıklama19",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4040),
                            Name = "Kategori19",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 20,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4043),
                            Description = "Açıklama20",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4043),
                            Name = "Kategori20",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 21,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4047),
                            Description = "Açıklama21",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4047),
                            Name = "Kategori21",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4050),
                            Description = "Açıklama22",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4051),
                            Name = "Kategori22",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 23,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4054),
                            Description = "Açıklama23",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4054),
                            Name = "Kategori23",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 24,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4058),
                            Description = "Açıklama24",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4058),
                            Name = "Kategori24",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 25,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4061),
                            Description = "Açıklama25",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4062),
                            Name = "Kategori25",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 26,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4065),
                            Description = "Açıklama26",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4065),
                            Name = "Kategori26",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 27,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4102),
                            Description = "Açıklama27",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4102),
                            Name = "Kategori27",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 28,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4106),
                            Description = "Açıklama28",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4106),
                            Name = "Kategori28",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 29,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4110),
                            Description = "Açıklama29",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4110),
                            Name = "Kategori29",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 30,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4113),
                            Description = "Açıklama30",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4114),
                            Name = "Kategori30",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 31,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4117),
                            Description = "Açıklama31",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4117),
                            Name = "Kategori31",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 32,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4121),
                            Description = "Açıklama32",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4121),
                            Name = "Kategori32",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 33,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4124),
                            Description = "Açıklama33",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4125),
                            Name = "Kategori33",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 34,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4129),
                            Description = "Açıklama34",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4129),
                            Name = "Kategori34",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 35,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4132),
                            Description = "Açıklama35",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4133),
                            Name = "Kategori35",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 36,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4136),
                            Description = "Açıklama36",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4136),
                            Name = "Kategori36",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 37,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4140),
                            Description = "Açıklama37",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4140),
                            Name = "Kategori37",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 38,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4143),
                            Description = "Açıklama38",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4144),
                            Name = "Kategori38",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 39,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4147),
                            Description = "Açıklama39",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4148),
                            Name = "Kategori39",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 40,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4151),
                            Description = "Açıklama40",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4151),
                            Name = "Kategori40",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 41,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4154),
                            Description = "Açıklama41",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4155),
                            Name = "Kategori41",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 42,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4158),
                            Description = "Açıklama42",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4158),
                            Name = "Kategori42",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 43,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4162),
                            Description = "Açıklama43",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4162),
                            Name = "Kategori43",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 44,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4165),
                            Description = "Açıklama44",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4166),
                            Name = "Kategori44",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 45,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4169),
                            Description = "Açıklama45",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4169),
                            Name = "Kategori45",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 46,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4172),
                            Description = "Açıklama46",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4173),
                            Name = "Kategori46",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 47,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4176),
                            Description = "Açıklama47",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4176),
                            Name = "Kategori47",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 48,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4213),
                            Description = "Açıklama48",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4214),
                            Name = "Kategori48",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 49,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4217),
                            Description = "Açıklama49",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4217),
                            Name = "Kategori49",
                            Note = "CategoryMap'ten kaydedildi."
                        },
                        new
                        {
                            Id = 50,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4221),
                            Description = "Açıklama50",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(4221),
                            Name = "Kategori50",
                            Note = "CategoryMap'ten kaydedildi."
                        });
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.CompetencyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("CompetencyLevels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(7225),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(7226),
                            Name = "beginner",
                            Note = "CompetencyLevel(beginner)"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(7243),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(7244),
                            Name = "elementary",
                            Note = "CompetencyLevel(elementary)"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(7248),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(7249),
                            Name = "pre-intermediate",
                            Note = "CompetencyLevel(pre-intermediate)"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(7252),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(7253),
                            Name = "intermediate",
                            Note = "CompetencyLevel(intermediate)"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(7299),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(7300),
                            Name = "upper-intermediate",
                            Note = "CompetencyLevel(upper-intermediate)"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(7305),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(7306),
                            Name = "advanced",
                            Note = "CompetencyLevel(advanced)"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(7309),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2024, 10, 1, 13, 45, 25, 61, DateTimeKind.Local).AddTicks(7309),
                            Name = "expert-proficency",
                            Note = "CompetencyLevel(expert-proficency)"
                        });
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CvId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Cv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HeaderImage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFreelance")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Cvs", (string)null);
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CvId")
                        .HasColumnType("int");

                    b.Property<string>("DateRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SchoolDegree")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("Educations", (string)null);
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CvId")
                        .HasColumnType("int");

                    b.Property<string>("DateRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Firm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("Experiences", (string)null);
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.MyLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompetencyLevelId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CvId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CompetencyLevelId");

                    b.HasIndex("CvId");

                    b.ToTable("MyLanguages", (string)null);
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Portfolios", (string)null);
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.PortfolioSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("SkillId");

                    b.ToTable("PortfolioSkills");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "48c07e94-9822-4736-8a7c-a33c5d0f053a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "6f3ebd09-01ba-4745-8a2e-69cf739d988d",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        });
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompetencyLevelId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CvId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CompetencyLevelId");

                    b.HasIndex("CvId");

                    b.ToTable("Skills", (string)null);
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CvId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("SocialMedias", (string)null);
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FacebookLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("GitHubLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InstagramLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LinkedInLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WebsiteLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("YoutubeLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Admin User About...",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9e0b64c-ccca-4e18-a4ff-ff9f479c1bbb",
                            Email = "admin@emreakdemir.net",
                            EmailConfirmed = true,
                            FacebookLink = "https://facebook.com/",
                            FirstName = "Admin",
                            GitHubLink = "https://github.com/",
                            InstagramLink = "https://instagram.com/",
                            LastName = "Admin",
                            LinkedInLink = "https://linkedin.com/",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMREAKDEMIR.NET",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKbPpnCymV2v9TJXCCOuwZhqsJjhtEFaUkTJenAdgRuFAASYIuTVgZ+v/tmw21coAA==",
                            PhoneNumber = "5551112233",
                            PhoneNumberConfirmed = true,
                            Picture = "defaultUser.png",
                            SecurityStamp = "67009e56-e2e4-4e04-8597-c14663fcdf59",
                            TwitterLink = "https://twitter.com/",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            WebsiteLink = "https://emreakdemir.net.com/",
                            YoutubeLink = "https://youtube.com/"
                        },
                        new
                        {
                            Id = 2,
                            About = "Editor User About...",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fddfe27-a0b2-41dc-a7af-00cac9f510ac",
                            Email = "editor@emreakdemir.net",
                            EmailConfirmed = true,
                            FacebookLink = "https://facebook.com/",
                            FirstName = "Editor",
                            GitHubLink = "https://github.com/",
                            InstagramLink = "https://instagram.com/",
                            LastName = "Editor",
                            LinkedInLink = "https://linkedin.com/",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITOR@EMREAKDEMIR.NET",
                            NormalizedUserName = "EDITOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEKFCS88Tng3o7iQTFx+OiG0P531bp+liYaoKkCVBfibnm5LVBffjFCqB66W/RuIBbA==",
                            PhoneNumber = "5551112234",
                            PhoneNumberConfirmed = true,
                            Picture = "defaultUser.png",
                            SecurityStamp = "3c6a5025-12d2-4688-91c7-65e49829ef34",
                            TwitterLink = "https://twitter.com/",
                            TwoFactorEnabled = false,
                            UserName = "editor",
                            WebsiteLink = "https://emreakdemir.net.com/",
                            YoutubeLink = "https://youtube.com/"
                        });
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Article", b =>
                {
                    b.HasOne("CvBlog.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CvBlog.Entities.Concrete.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("CvBlog.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Customer", b =>
                {
                    b.HasOne("CvBlog.Entities.Concrete.Cv", null)
                        .WithMany("Customers")
                        .HasForeignKey("CvId");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Education", b =>
                {
                    b.HasOne("CvBlog.Entities.Concrete.Cv", null)
                        .WithMany("Educations")
                        .HasForeignKey("CvId");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Experience", b =>
                {
                    b.HasOne("CvBlog.Entities.Concrete.Cv", null)
                        .WithMany("Experiences")
                        .HasForeignKey("CvId");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.MyLanguage", b =>
                {
                    b.HasOne("CvBlog.Entities.Concrete.CompetencyLevel", "CompetencyLevel")
                        .WithMany()
                        .HasForeignKey("CompetencyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CvBlog.Entities.Concrete.Cv", null)
                        .WithMany("MyLanguages")
                        .HasForeignKey("CvId");

                    b.Navigation("CompetencyLevel");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Portfolio", b =>
                {
                    b.HasOne("CvBlog.Entities.Concrete.Service", "Service")
                        .WithMany("Portfolios")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.PortfolioSkill", b =>
                {
                    b.HasOne("CvBlog.Entities.Concrete.Portfolio", "Portfolio")
                        .WithMany("PortfolioSkills")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CvBlog.Entities.Concrete.Skill", "Skill")
                        .WithMany("SkillPortfolios")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("CvBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Skill", b =>
                {
                    b.HasOne("CvBlog.Entities.Concrete.CompetencyLevel", "CompetencyLevel")
                        .WithMany()
                        .HasForeignKey("CompetencyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CvBlog.Entities.Concrete.Cv", null)
                        .WithMany("Skills")
                        .HasForeignKey("CvId");

                    b.Navigation("CompetencyLevel");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.SocialMedia", b =>
                {
                    b.HasOne("CvBlog.Entities.Concrete.Cv", null)
                        .WithMany("SocialMedias")
                        .HasForeignKey("CvId");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("CvBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("CvBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("CvBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CvBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("CvBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Cv", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("MyLanguages");

                    b.Navigation("Skills");

                    b.Navigation("SocialMedias");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Portfolio", b =>
                {
                    b.Navigation("PortfolioSkills");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Service", b =>
                {
                    b.Navigation("Portfolios");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.Skill", b =>
                {
                    b.Navigation("SkillPortfolios");
                });

            modelBuilder.Entity("CvBlog.Entities.Concrete.User", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
